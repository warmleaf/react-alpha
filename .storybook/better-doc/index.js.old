import React from 'react'
import addons from '@storybook/addons'
import APIDoc from './APIDoc'

const renderDoc = (code, options) => {
  for (let i = 0; i < options.skip; i += 1) {
    if (typeof code === 'undefined') {
      console.warn('Cannot skip undefined element')
      return
    }

    if (React.Children.count(code) > 1) {
      console.warn('Trying to skip an array of elements')
      return
    }

    if (typeof code.props.children === 'undefined') {
      console.warn('Not enough children to skip elements.')

      if (typeof code.type === 'function' && code.type.name === '') code = code.type(code.props)
    } else {
      if (typeof code.props.children === 'function') {
        code = code.props.children()
      } else {
        code = code.props.children
      }
    }
  }

  if (typeof code === 'undefined') return console.warn('Too many skip or undefined component')

  while (typeof code.type === 'function' && code.type.name === '') code = code.type(code.props)

  const ooo =
    typeof options.displayName === 'string'
      ? Object.assign({}, options, { showFunctions: true, displayName: () => options.displayName })
      : options

  return React.Children.map(code, C => <C {...ooo} />).join('\n')
}

export default {
  addWithAPIDoc({ kind, ...rest }, storyFn, opts = {}) {
    const defaultOpts = {
      skip: 0,
      showFunctions: true,
      enableBeautify: true
    }
    const options = Object.assign({}, defaultOpts, opts)
    const channel = addons.getChannel()

    const result = this.add(kind, context => {
      const story = storyFn(context)
      let info = ''

      if (story.template) {
        info = story.template
      } else {
        info = renderDoc(story, options)
      }

      channel.emit('warmleaf/betterDoc/add_addon', result.kind, kind, info)

      return <APIDoc kind={kind} demo={storyFn.toString()} {...rest} />
    })

    return result
  },
}