import * as React from 'react';
import styled, { StyledFunction } from "styled-components";

const a: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLAnchorElement>> = styled.a
const abbr: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.abbr
const address: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.address
const area: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLAreaElement>> = styled.area
const article: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.article
const aside: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.aside
const audio: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.audio
const b: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.b
const base: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.base
const bdi: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.bdi
const bdo: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.bdo
const big: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.big
const blockquote: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.blockquote
const body: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLBodyElement>> = styled.body
const br: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLBRElement>> = styled.br
const button: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLButtonElement>> = styled.button
const canvas: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLCanvasElement>> = styled.canvas
const caption: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.caption
const cite: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.cite
const code: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.code
const col: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLTableColElement>> = styled.col
const colgroup: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLTableColElement>> = styled.colgroup
const data: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.data
const datalist: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLDataListElement>> = styled.datalist
const dd: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.dd
const del: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.del
const details: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.details
const dfn: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.dfn
const dialog: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.dialog
const div: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLDivElement>> = styled.div
const dl: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLDListElement>> = styled.dl
const dt: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.dt
const em: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.em
const embed: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLEmbedElement>> = styled.embed
const fieldset: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLFieldSetElement>> = styled.fieldset
const figcaption: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.figcaption
const figure: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.figure
const footer: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.footer
const form: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLFormElement>> = styled.form
const h1: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLHeadingElement>> = styled.h1
const h2: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLHeadingElement>> = styled.h2
const h3: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLHeadingElement>> = styled.h3
const h4: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLHeadingElement>> = styled.h4
const h5: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLHeadingElement>> = styled.h5
const h6: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLHeadingElement>> = styled.h6
const head: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLHeadElement>> = styled.head
const header: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.header
const hgroup: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.hgroup
const hr: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLHRElement>> = styled.hr
const html: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.html
const i: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.i
const iframe: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLIFrameElement>> = styled.iframe
const img: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLImageElement>> = styled.img
const input: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLInputElement>> = styled.input
const ins: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLModElement>> = styled.ins
const kbd: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.kbd
const keygen: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.keygen
const label: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLLabelElement>> = styled.label
const legend: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLLegendElement>> = styled.legend
const li: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLLIElement>> = styled.li
const link: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLLinkElement>> = styled.link
const main: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.main
const map: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLMapElement>> = styled.map
const mark: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.mark
const menu: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.menu
const menuitem: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.menuitem
const meta: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLMetaElement>> = styled.meta
const meter: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.meter
const nav: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.nav
const noindex: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.noindex
const noscript: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.noscript
const object: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLObjectElement>> = styled.object
const ol: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLOListElement>> = styled.ol
const optgroup: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLOptGroupElement>> = styled.optgroup
const option: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLOptionElement>> = styled.option
const output: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.output
const p: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLParagraphElement>> = styled.p
const param: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLParamElement>> = styled.param
const picture: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.picture
const pre: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLPreElement>> = styled.pre
const progress: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLProgressElement>> = styled.progress
const q: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLQuoteElement>> = styled.q
const rp: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.rp
const rt: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.rt
const ruby: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.ruby
const s: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.s
const samp: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.samp
const script: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLScriptElement>> = styled.script
const section: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.section
const select: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLSelectElement>> = styled.select
const small: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.small
const source: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLSourceElement>> = styled.source
const span: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLSpanElement>> = styled.span
const style: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLStyleElement>> = styled.style
const sub: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.sub
const summary: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.summary
const sup: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.sup
const table: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLTableElement>> = styled.table
const tbody: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLTableSectionElement>> = styled.tbody
const td: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLTableDataCellElement>> = styled.td
const textarea: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLTextAreaElement>> = styled.textarea
const tfoot: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLTableSectionElement>> = styled.tfoot
const th: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLTableHeaderCellElement>> = styled.th
const thead: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLTableSectionElement>> = styled.thead
const time: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.time
const title: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLTitleElement>> = styled.title
const tr: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLTableRowElement>> = styled.tr
const track: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLTrackElement>> = styled.track
const u: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.u
const ul: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLUListElement>> = styled.ul
const strong: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.strong
const video: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLVideoElement>> = styled.video
const wbr: StyledFunction<React.CSSProperties & React.HTMLProps<HTMLElement>> = styled.wbr
const svg: StyledFunction<React.CSSProperties & React.SVGProps<SVGSVGElement>> = styled.svg
const animate: StyledFunction<React.CSSProperties & React.SVGProps<SVGElement>> = styled.animate
const animateTransform: StyledFunction<React.CSSProperties & React.SVGProps<SVGElement>> = styled.animateTransform
const circle: StyledFunction<React.CSSProperties & React.SVGProps<SVGCircleElement>> = styled.circle
const clipPath: StyledFunction<React.CSSProperties & React.SVGProps<SVGClipPathElement>> = styled.clipPath
const defs: StyledFunction<React.CSSProperties & React.SVGProps<SVGDefsElement>> = styled.defs
const desc: StyledFunction<React.CSSProperties & React.SVGProps<SVGDescElement>> = styled.desc
const ellipse: StyledFunction<React.CSSProperties & React.SVGProps<SVGEllipseElement>> = styled.ellipse
const feBlend: StyledFunction<React.CSSProperties & React.SVGProps<SVGFEBlendElement>> = styled.feBlend
const feColorMatrix: StyledFunction<React.CSSProperties & React.SVGProps<SVGFEColorMatrixElement>> = styled.feColorMatrix
const feComponentTransfer: StyledFunction<React.CSSProperties & React.SVGProps<SVGFEComponentTransferElement>> = styled.feComponentTransfer
const feComposite: StyledFunction<React.CSSProperties & React.SVGProps<SVGFECompositeElement>> = styled.feComposite
const feConvolveMatrix: StyledFunction<React.CSSProperties & React.SVGProps<SVGFEConvolveMatrixElement>> = styled.feConvolveMatrix
const feDiffuseLighting: StyledFunction<React.CSSProperties & React.SVGProps<SVGFEDiffuseLightingElement>> = styled.feDiffuseLighting
const feDisplacementMap: StyledFunction<React.CSSProperties & React.SVGProps<SVGFEDisplacementMapElement>> = styled.feDisplacementMap
const feDistantLight: StyledFunction<React.CSSProperties & React.SVGProps<SVGFEDistantLightElement>> = styled.feDistantLight
const feFlood: StyledFunction<React.CSSProperties & React.SVGProps<SVGFEFloodElement>> = styled.feFlood
const feFuncA: StyledFunction<React.CSSProperties & React.SVGProps<SVGFEFuncAElement>> = styled.feFuncA
const feFuncB: StyledFunction<React.CSSProperties & React.SVGProps<SVGFEFuncBElement>> = styled.feFuncB
const feFuncG: StyledFunction<React.CSSProperties & React.SVGProps<SVGFEFuncGElement>> = styled.feFuncG
const feFuncR: StyledFunction<React.CSSProperties & React.SVGProps<SVGFEFuncRElement>> = styled.feFuncR
const feGaussianBlur: StyledFunction<React.CSSProperties & React.SVGProps<SVGFEGaussianBlurElement>> = styled.feGaussianBlur
const feImage: StyledFunction<React.CSSProperties & React.SVGProps<SVGFEImageElement>> = styled.feImage
const feMerge: StyledFunction<React.CSSProperties & React.SVGProps<SVGFEMergeElement>> = styled.feMerge
const feMergeNode: StyledFunction<React.CSSProperties & React.SVGProps<SVGFEMergeNodeElement>> = styled.feMergeNode
const feMorphology: StyledFunction<React.CSSProperties & React.SVGProps<SVGFEMorphologyElement>> = styled.feMorphology
const feOffset: StyledFunction<React.CSSProperties & React.SVGProps<SVGFEOffsetElement>> = styled.feOffset
const fePointLight: StyledFunction<React.CSSProperties & React.SVGProps<SVGFEPointLightElement>> = styled.fePointLight
const feSpecularLighting: StyledFunction<React.CSSProperties & React.SVGProps<SVGFESpecularLightingElement>> = styled.feSpecularLighting
const feSpotLight: StyledFunction<React.CSSProperties & React.SVGProps<SVGFESpotLightElement>> = styled.feSpotLight
const feTile: StyledFunction<React.CSSProperties & React.SVGProps<SVGFETileElement>> = styled.feTile
const feTurbulence: StyledFunction<React.CSSProperties & React.SVGProps<SVGFETurbulenceElement>> = styled.feTurbulence
const filter: StyledFunction<React.CSSProperties & React.SVGProps<SVGFilterElement>> = styled.filter
const foreignObject: StyledFunction<React.CSSProperties & React.SVGProps<SVGForeignObjectElement>> = styled.foreignObject
const g: StyledFunction<React.CSSProperties & React.SVGProps<SVGGElement>> = styled.g
const image: StyledFunction<React.CSSProperties & React.SVGProps<SVGImageElement>> = styled.image
const line: StyledFunction<React.CSSProperties & React.SVGProps<SVGLineElement>> = styled.line
const linearGradient: StyledFunction<React.CSSProperties & React.SVGProps<SVGLinearGradientElement>> = styled.linearGradient
const marker: StyledFunction<React.CSSProperties & React.SVGProps<SVGMarkerElement>> = styled.marker
const mask: StyledFunction<React.CSSProperties & React.SVGProps<SVGMaskElement>> = styled.mask
const metadata: StyledFunction<React.CSSProperties & React.SVGProps<SVGMetadataElement>> = styled.metadata
const path: StyledFunction<React.CSSProperties & React.SVGProps<SVGPathElement>> = styled.path
const pattern: StyledFunction<React.CSSProperties & React.SVGProps<SVGPatternElement>> = styled.pattern
const polygon: StyledFunction<React.CSSProperties & React.SVGProps<SVGPolygonElement>> = styled.polygon
const polyline: StyledFunction<React.CSSProperties & React.SVGProps<SVGPolylineElement>> = styled.polyline
const radialGradient: StyledFunction<React.CSSProperties & React.SVGProps<SVGRadialGradientElement>> = styled.radialGradient
const rect: StyledFunction<React.CSSProperties & React.SVGProps<SVGRectElement>> = styled.rect
const stop: StyledFunction<React.CSSProperties & React.SVGProps<SVGStopElement>> = styled.stop
const symbol: StyledFunction<React.CSSProperties & React.SVGProps<SVGSymbolElement>> = styled.symbol
const text: StyledFunction<React.CSSProperties & React.SVGProps<SVGTextElement>> = styled.text
const textPath: StyledFunction<React.CSSProperties & React.SVGProps<SVGTextPathElement>> = styled.textPath
const tspan: StyledFunction<React.CSSProperties & React.SVGProps<SVGTSpanElement>> = styled.tspan
const use: StyledFunction<React.CSSProperties & React.SVGProps<SVGUseElement>> = styled.use
const view: StyledFunction<React.CSSProperties & React.SVGProps<SVGViewElement>> = styled.view

/**
 * wrapped with css properties
 * 
 * @param {string[]} CSSProperties
 * @returns 
 */
function withCssProps(dom = (...p: any[]):any => p) {
  return dom`
    align-content: ${(p:React.CSSProperties) => p['align-content']};
    align-items: ${(p:React.CSSProperties) => p['align-items']};
    align-self: ${(p:React.CSSProperties) => p['align-self']};
    alignment-adjust: ${(p:React.CSSProperties) => p['alignment-adjust']};
    alignment-baseline: ${(p:React.CSSProperties) => p['alignment-baseline']};
    animation-delay: ${(p:React.CSSProperties) => p['animation-delay']};
    animation-direction: ${(p:React.CSSProperties) => p['animation-direction']};
    animation-iteration-count: ${(p:React.CSSProperties) => p['animation-iteration-count']};
    animation-name: ${(p:React.CSSProperties) => p['animation-name']};
    animation-play-state: ${(p:React.CSSProperties) => p['animation-play-state']};
    appearance: ${(p:React.CSSProperties) => p.appearance};
    backface-visibility: ${(p:React.CSSProperties) => p['backface-visibility']};
    background: ${(p:React.CSSProperties) => p.background};
    background-attachment: ${(p:React.CSSProperties) => p['background-attachment']};
    background-blend-mode: ${(p:React.CSSProperties) => p['background-blend-mode']};
    background-color: ${(p:React.CSSProperties) => p['background-color']};
    background-composite: ${(p:React.CSSProperties) => p['background-composite']};
    background-image: ${(p:React.CSSProperties) => p['background-image']};
    background-origin: ${(p:React.CSSProperties) => p['background-origin']};
    background-position: ${(p:React.CSSProperties) => p['background-position']};
    background-repeat: ${(p:React.CSSProperties) => p['background-repeat']};
    background-size: ${(p:React.CSSProperties) => p['background-size']};
    baseline-shift: ${(p:React.CSSProperties) => p['baseline-shift']};
    behavior: ${(p:React.CSSProperties) => p.behavior};
    border: ${(p:React.CSSProperties) => p.border};
    border-bottom: ${(p:React.CSSProperties) => p['border-bottom']};
    border-bottom-color: ${(p:React.CSSProperties) => p['border-bottom-color']};
    border-bottom-left-radius: ${(p:React.CSSProperties) => p['border-bottom-left-radius']};
    border-bottom-right-radius: ${(p:React.CSSProperties) => p['border-bottom-right-radius']};
    border-bottom-style: ${(p:React.CSSProperties) => p['border-bottom-style']};
    border-bottom-width: ${(p:React.CSSProperties) => p['border-bottom-width']};
    border-collapse: ${(p:React.CSSProperties) => p['border-collapse']};
    border-color: ${(p:React.CSSProperties) => p['border-color']};
    border-corner-shape: ${(p:React.CSSProperties) => p['border-corner-shape']};
    border-image-source: ${(p:React.CSSProperties) => p['border-image-source']};
    border-image-width: ${(p:React.CSSProperties) => p['border-image-width']};
    border-left: ${(p:React.CSSProperties) => p['border-left']};
    border-left-color: ${(p:React.CSSProperties) => p['border-left-color']};
    border-left-style: ${(p:React.CSSProperties) => p['border-left-style']};
    border-left-width: ${(p:React.CSSProperties) => p['border-left-width']};
    border-radius: ${(p:React.CSSProperties) => p['border-radius']};
    border-right: ${(p:React.CSSProperties) => p['border-right']};
    border-right-color: ${(p:React.CSSProperties) => p['border-right-color']};
    border-right-style: ${(p:React.CSSProperties) => p['border-right-style']};
    border-right-width: ${(p:React.CSSProperties) => p['border-right-width']};
    border-spacing: ${(p:React.CSSProperties) => p['border-spacing']};
    border-style: ${(p:React.CSSProperties) => p['border-style']};
    border-top: ${(p:React.CSSProperties) => p['border-top']};
    border-top-color: ${(p:React.CSSProperties) => p['border-top-color']};
    border-top-left-radius: ${(p:React.CSSProperties) => p['border-top-left-radius']};
    border-top-right-radius: ${(p:React.CSSProperties) => p['border-top-right-radius']};
    border-top-style: ${(p:React.CSSProperties) => p['border-top-style']};
    border-top-width: ${(p:React.CSSProperties) => p['border-top-width']};
    border-width: ${(p:React.CSSProperties) => p['border-width']};
    bottom: ${(p:React.CSSProperties) => p.bottom};
    box-align: ${(p:React.CSSProperties) => p['box-align']};
    box-decoration-break: ${(p:React.CSSProperties) => p['box-decoration-break']};
    box-direction: ${(p:React.CSSProperties) => p['box-direction']};
    box-line-progression: ${(p:React.CSSProperties) => p['box-line-progression']};
    box-lines: ${(p:React.CSSProperties) => p['box-lines']};
    box-ordinal-group: ${(p:React.CSSProperties) => p['box-ordinal-group']};
    box-flex: ${(p:React.CSSProperties) => p['box-flex']};
    box-flex-group: ${(p:React.CSSProperties) => p['box-flex-group']};
    box-shadow: ${(p:React.CSSProperties) => p['box-shadow']};
    box-sizing: ${(p:React.CSSProperties) => p['box-sizing']};
    break-after: ${(p:React.CSSProperties) => p['break-after']};
    break-before: ${(p:React.CSSProperties) => p['break-before']};
    break-inside: ${(p:React.CSSProperties) => p['break-inside']};
    clear: ${(p:React.CSSProperties) => p.clear};
    clip: ${(p:React.CSSProperties) => p.clip};
    clip-rule: ${(p:React.CSSProperties) => p['clip-rule']};
    color: ${(p:React.CSSProperties) => p.color};
    column-count: ${(p:React.CSSProperties) => p['column-count']};
    column-fill: ${(p:React.CSSProperties) => p['column-fill']};
    column-gap: ${(p:React.CSSProperties) => p['column-gap']};
    column-rule: ${(p:React.CSSProperties) => p['column-rule']};
    column-rule-color: ${(p:React.CSSProperties) => p['column-rule-color']};
    column-rule-width: ${(p:React.CSSProperties) => p['column-rule-width']};
    column-span: ${(p:React.CSSProperties) => p['column-span']};
    column-width: ${(p:React.CSSProperties) => p['column-width']};
    columns: ${(p:React.CSSProperties) => p.columns};
    counter-increment: ${(p:React.CSSProperties) => p['counter-increment']};
    counter-reset: ${(p:React.CSSProperties) => p['counter-reset']};
    cue: ${(p:React.CSSProperties) => p.cue};
    cue-after: ${(p:React.CSSProperties) => p['cue-after']};
    cursor: ${(p:React.CSSProperties) => p.cursor};
    direction: ${(p:React.CSSProperties) => p.direction};
    display: ${(p:React.CSSProperties) => p.display};
    fill: ${(p:React.CSSProperties) => p.fill};
    fill-opacity: ${(p:React.CSSProperties) => p['fill-opacity']};
    fill-rule: ${(p:React.CSSProperties) => p['fill-rule']};
    filter: ${(p:React.CSSProperties) => p.filter};
    flex: ${(p:React.CSSProperties) => p.flex};
    flex-align: ${(p:React.CSSProperties) => p['flex-align']};
    flex-basis: ${(p:React.CSSProperties) => p['flex-basis']};
    flex-direction: ${(p:React.CSSProperties) => p['flex-direction']};
    flex-flow: ${(p:React.CSSProperties) => p['flex-flow']};
    flex-grow: ${(p:React.CSSProperties) => p['flex-grow']};
    flex-itemalign: ${(p:React.CSSProperties) => p['flex-itemalign']};
    flex-line-pack: ${(p:React.CSSProperties) => p['flex-line-pack']};
    flex-order: ${(p:React.CSSProperties) => p['flex-order']};
    flex-shrink: ${(p:React.CSSProperties) => p['flex-shrink']};
    flex-wrap: ${(p:React.CSSProperties) => p['flex-wrap']};
    float: ${(p:React.CSSProperties) => p.float};
    flow-from: ${(p:React.CSSProperties) => p['flow-from']};
    font: ${(p:React.CSSProperties) => p.font};
    font-family: ${(p:React.CSSProperties) => p['font-family']};
    font-kerning: ${(p:React.CSSProperties) => p['font-kerning']};
    font-size: ${(p:React.CSSProperties) => p['font-size']};
    font-size-adjust: ${(p:React.CSSProperties) => p['font-size-adjust']};
    font-stretch: ${(p:React.CSSProperties) => p['font-stretch']};
    font-style: ${(p:React.CSSProperties) => p['font-style']};
    font-synthesis: ${(p:React.CSSProperties) => p['font-synthesis']};
    font-variant: ${(p:React.CSSProperties) => p['font-variant']};
    font-variant-alternates: ${(p:React.CSSProperties) => p['font-variant-alternates']};
    font-weight: ${(p:React.CSSProperties) => p['font-weight']};
    grid-area: ${(p:React.CSSProperties) => p['grid-area']};
    grid-column: ${(p:React.CSSProperties) => p['grid-column']};
    grid-column-end: ${(p:React.CSSProperties) => p['grid-column-end']};
    grid-column-start: ${(p:React.CSSProperties) => p['grid-column-start']};
    grid-row: ${(p:React.CSSProperties) => p['grid-row']};
    grid-row-end: ${(p:React.CSSProperties) => p['grid-row-end']};
    grid-row-position: ${(p:React.CSSProperties) => p['grid-row-position']};
    grid-row-span: ${(p:React.CSSProperties) => p['grid-row-span']};
    grid-template-areas: ${(p:React.CSSProperties) => p['grid-template-areas']};
    grid-template-columns: ${(p:React.CSSProperties) => p['grid-template-columns']};
    grid-template-rows: ${(p:React.CSSProperties) => p['grid-template-rows']};
    height: ${(p:React.CSSProperties) => p.height};
    hyphenate-limit-chars: ${(p:React.CSSProperties) => p['hyphenate-limit-chars']};
    hyphenate-limit-lines: ${(p:React.CSSProperties) => p['hyphenate-limit-lines']};
    hyphenate-limit-zone: ${(p:React.CSSProperties) => p['hyphenate-limit-zone']};
    hyphens: ${(p:React.CSSProperties) => p.hyphens};
    ime-mode: ${(p:React.CSSProperties) => p['ime-mode']};
    justify-content: ${(p:React.CSSProperties) => p['justify-content']};
    layout-grid: ${(p:React.CSSProperties) => p['layout-grid']};
    layout-grid-char: ${(p:React.CSSProperties) => p['layout-grid-char']};
    layout-grid-line: ${(p:React.CSSProperties) => p['layout-grid-line']};
    layout-grid-mode: ${(p:React.CSSProperties) => p['layout-grid-mode']};
    layout-grid-type: ${(p:React.CSSProperties) => p['layout-grid-type']};
    left: ${(p:React.CSSProperties) => p.left};
    letter-spacing: ${(p:React.CSSProperties) => p['letter-spacing']};
    line-break: ${(p:React.CSSProperties) => p['line-break']};
    line-clamp: ${(p:React.CSSProperties) => p['line-clamp']};
    line-height: ${(p:React.CSSProperties) => p['line-height']};
    list-style: ${(p:React.CSSProperties) => p['list-style']};
    list-style-image: ${(p:React.CSSProperties) => p['list-style-image']};
    list-style-position: ${(p:React.CSSProperties) => p['list-style-position']};
    list-style-type: ${(p:React.CSSProperties) => p['list-style-type']};
    margin: ${(p:React.CSSProperties) => p.margin};
    margin-bottom: ${(p:React.CSSProperties) => p['margin-bottom']};
    margin-left: ${(p:React.CSSProperties) => p['margin-left']};
    margin-right: ${(p:React.CSSProperties) => p['margin-right']};
    margin-top: ${(p:React.CSSProperties) => p['margin-top']};
    marquee-direction: ${(p:React.CSSProperties) => p['marquee-direction']};
    marquee-style: ${(p:React.CSSProperties) => p['marquee-style']};
    mask: ${(p:React.CSSProperties) => p.mask};
    mask-border: ${(p:React.CSSProperties) => p['mask-border']};
    mask-border-repeat: ${(p:React.CSSProperties) => p['mask-border-repeat']};
    mask-border-slice: ${(p:React.CSSProperties) => p['mask-border-slice']};
    mask-border-source: ${(p:React.CSSProperties) => p['mask-border-source']};
    mask-border-width: ${(p:React.CSSProperties) => p['mask-border-width']};
    mask-clip: ${(p:React.CSSProperties) => p['mask-clip']};
    mask-origin: ${(p:React.CSSProperties) => p['mask-origin']};
    max-font-size: ${(p:React.CSSProperties) => p['max-font-size']};
    max-height: ${(p:React.CSSProperties) => p['max-height']};
    max-width: ${(p:React.CSSProperties) => p['max-width']};
    min-height: ${(p:React.CSSProperties) => p['min-height']};
    min-width: ${(p:React.CSSProperties) => p['min-width']};
    opacity: ${(p:React.CSSProperties) => p.opacity};
    order: ${(p:React.CSSProperties) => p.order};
    orphans: ${(p:React.CSSProperties) => p.orphans};
    outline: ${(p:React.CSSProperties) => p.outline};
    outline-color: ${(p:React.CSSProperties) => p['outline-color']};
    outline-offset: ${(p:React.CSSProperties) => p['outline-offset']};
    overflow: ${(p:React.CSSProperties) => p.overflow};
    overflow-style: ${(p:React.CSSProperties) => p['overflow-style']};
    overflow-x: ${(p:React.CSSProperties) => p['overflow-x']};
    overflow-y: ${(p:React.CSSProperties) => p['overflow-y']};
    padding: ${(p:React.CSSProperties) => p.padding};
    padding-bottom: ${(p:React.CSSProperties) => p['padding-bottom']};
    padding-left: ${(p:React.CSSProperties) => p['padding-left']};
    padding-right: ${(p:React.CSSProperties) => p['padding-right']};
    padding-top: ${(p:React.CSSProperties) => p['padding-top']};
    page-break-after: ${(p:React.CSSProperties) => p['page-break-after']};
    page-break-before: ${(p:React.CSSProperties) => p['page-break-before']};
    page-break-inside: ${(p:React.CSSProperties) => p['page-break-inside']};
    pause: ${(p:React.CSSProperties) => p.pause};
    pause-before: ${(p:React.CSSProperties) => p['pause-before']};
    perspective: ${(p:React.CSSProperties) => p.perspective};
    perspective-origin: ${(p:React.CSSProperties) => p['perspective-origin']};
    pointer-events: ${(p:React.CSSProperties) => p['pointer-events']};
    position: ${(p:React.CSSProperties) => p.position};
    punctuation-trim: ${(p:React.CSSProperties) => p['punctuation-trim']};
    quotes: ${(p:React.CSSProperties) => p.quotes};
    region-fragment: ${(p:React.CSSProperties) => p['region-fragment']};
    rest-after: ${(p:React.CSSProperties) => p['rest-after']};
    rest-before: ${(p:React.CSSProperties) => p['rest-before']};
    right: ${(p:React.CSSProperties) => p.right};
    ruby-align: ${(p:React.CSSProperties) => p['ruby-align']};
    ruby-position: ${(p:React.CSSProperties) => p['ruby-position']};
    shape-image-threshold: ${(p:React.CSSProperties) => p['shape-image-threshold']};
    shape-inside: ${(p:React.CSSProperties) => p['shape-inside']};
    shape-margin: ${(p:React.CSSProperties) => p['shape-margin']};
    shape-outside: ${(p:React.CSSProperties) => p['shape-outside']};
    speak: ${(p:React.CSSProperties) => p.speak};
    speak-as: ${(p:React.CSSProperties) => p['speak-as']};
    stroke-opacity: ${(p:React.CSSProperties) => p['stroke-opacity']};
    stroke-width: ${(p:React.CSSProperties) => p['stroke-width']};
    tab-size: ${(p:React.CSSProperties) => p['tab-size']};
    table-layout: ${(p:React.CSSProperties) => p['table-layout']};
    text-align: ${(p:React.CSSProperties) => p['text-align']};
    text-align-last: ${(p:React.CSSProperties) => p['text-align-last']};
    text-decoration: ${(p:React.CSSProperties) => p['text-decoration']};
    text-decoration-color: ${(p:React.CSSProperties) => p['text-decoration-color']};
    text-decoration-line: ${(p:React.CSSProperties) => p['text-decoration-line']};
    text-decoration-line-through: ${(p:React.CSSProperties) => p['text-decoration-line-through']};
    text-decoration-none: ${(p:React.CSSProperties) => p['text-decoration-none']};
    text-decoration-overline: ${(p:React.CSSProperties) => p['text-decoration-overline']};
    text-decoration-skip: ${(p:React.CSSProperties) => p['text-decoration-skip']};
    text-decoration-style: ${(p:React.CSSProperties) => p['text-decoration-style']};
    text-decoration-underline: ${(p:React.CSSProperties) => p['text-decoration-underline']};
    text-emphasis: ${(p:React.CSSProperties) => p['text-emphasis']};
    text-emphasis-color: ${(p:React.CSSProperties) => p['text-emphasis-color']};
    text-emphasis-style: ${(p:React.CSSProperties) => p['text-emphasis-style']};
    text-height: ${(p:React.CSSProperties) => p['text-height']};
    text-indent: ${(p:React.CSSProperties) => p['text-indent']};
    text-justify-trim: ${(p:React.CSSProperties) => p['text-justify-trim']};
    text-kashida-space: ${(p:React.CSSProperties) => p['text-kashida-space']};
    text-line-through: ${(p:React.CSSProperties) => p['text-line-through']};
    text-line-through-color: ${(p:React.CSSProperties) => p['text-line-through-color']};
    text-line-through-mode: ${(p:React.CSSProperties) => p['text-line-through-mode']};
    text-line-through-style: ${(p:React.CSSProperties) => p['text-line-through-style']};
    text-line-through-width: ${(p:React.CSSProperties) => p['text-line-through-width']};
    text-overflow: ${(p:React.CSSProperties) => p['text-overflow']};
    text-overline: ${(p:React.CSSProperties) => p['text-overline']};
    text-overline-color: ${(p:React.CSSProperties) => p['text-overline-color']};
    text-overline-mode: ${(p:React.CSSProperties) => p['text-overline-mode']};
    text-overline-style: ${(p:React.CSSProperties) => p['text-overline-style']};
    text-overline-width: ${(p:React.CSSProperties) => p['text-overline-width']};
    text-rendering: ${(p:React.CSSProperties) => p['text-rendering']};
    text-script: ${(p:React.CSSProperties) => p['text-script']};
    text-shadow: ${(p:React.CSSProperties) => p['text-shadow']};
    text-transform: ${(p:React.CSSProperties) => p['text-transform']};
    text-underline-position: ${(p:React.CSSProperties) => p['text-underline-position']};
    text-underline-style: ${(p:React.CSSProperties) => p['text-underline-style']};
    top: ${(p:React.CSSProperties) => p.top};
    touch-action: ${(p:React.CSSProperties) => p['touch-action']};
    transform: ${(p:React.CSSProperties) => p.transform};
    transform-origin: ${(p:React.CSSProperties) => p['transform-origin']};
    transform-origin-z: ${(p:React.CSSProperties) => p['transform-origin-z']};
    transform-style: ${(p:React.CSSProperties) => p['transform-style']};
    transition: ${(p:React.CSSProperties) => p.transition};
    transition-delay: ${(p:React.CSSProperties) => p['transition-delay']};
    transition-duration: ${(p:React.CSSProperties) => p['transition-duration']};
    transition-property: ${(p:React.CSSProperties) => p['transition-property']};
    transition-timing-function: ${(p:React.CSSProperties) => p['transition-timing-function']};
    unicode-bidi: ${(p:React.CSSProperties) => p['unicode-bidi']};
    unicode-range: ${(p:React.CSSProperties) => p['unicode-range']};
    user-input: ${(p:React.CSSProperties) => p['user-input']};
    vertical-align: ${(p:React.CSSProperties) => p['vertical-align']};
    visibility: ${(p:React.CSSProperties) => p.visibility};
    voice-balance: ${(p:React.CSSProperties) => p['voice-balance']};
    voice-duration: ${(p:React.CSSProperties) => p['voice-duration']};
    voice-family: ${(p:React.CSSProperties) => p['voice-family']};
    voice-pitch: ${(p:React.CSSProperties) => p['voice-pitch']};
    voice-range: ${(p:React.CSSProperties) => p['voice-range']};
    voice-rate: ${(p:React.CSSProperties) => p['voice-rate']};
    voice-stress: ${(p:React.CSSProperties) => p['voice-stress']};
    voice-volume: ${(p:React.CSSProperties) => p['voice-volume']};
    white-space-treatment: ${(p:React.CSSProperties) => p['white-space-treatment']};
    widows: ${(p:React.CSSProperties) => p.widows};
    width: ${(p:React.CSSProperties) => p.width};
    word-break: ${(p:React.CSSProperties) => p['word-break']};
    word-spacing: ${(p:React.CSSProperties) => p['word-spacing']};
    word-wrap: ${(p:React.CSSProperties) => p['word-wrap']};
    wrap-flow: ${(p:React.CSSProperties) => p['wrap-flow']};
    wrap-margin: ${(p:React.CSSProperties) => p['wrap-margin']};
    wrap-option: ${(p:React.CSSProperties) => p['wrap-option']};
    writing-mode: ${(p:React.CSSProperties) => p['writing-mode']};
    z-index: ${(p:React.CSSProperties) => p['z-index']};
    zoom: ${(p:React.CSSProperties) => p.zoom};
  `
}

export default {
  A: withCssProps(a),
  Abbr: withCssProps(abbr),
  Address: withCssProps(address),
  Area: withCssProps(area),
  Article: withCssProps(article),
  Aside: withCssProps(aside),
  Audio: withCssProps(audio),
  B: withCssProps(b),
  Base: withCssProps(base),
  Bdi: withCssProps(bdi),
  Bdo: withCssProps(bdo),
  Big: withCssProps(big),
  Blockquote: withCssProps(blockquote),
  Body: withCssProps(body),
  Br: withCssProps(br),
  Button: withCssProps(button),
  Canvas: withCssProps(canvas),
  Caption: withCssProps(caption),
  Cite: withCssProps(cite),
  Code: withCssProps(code),
  Col: withCssProps(col),
  Colgroup: withCssProps(colgroup),
  Data: withCssProps(data),
  Datalist: withCssProps(datalist),
  Dd: withCssProps(dd),
  Del: withCssProps(del),
  Details: withCssProps(details),
  Dfn: withCssProps(dfn),
  Dialog: withCssProps(dialog),
  Div: withCssProps(div),
  Dl: withCssProps(dl),
  Dt: withCssProps(dt),
  Em: withCssProps(em),
  Embed: withCssProps(embed),
  Fieldset: withCssProps(fieldset),
  Figcaption: withCssProps(figcaption),
  Figure: withCssProps(figure),
  Footer: withCssProps(footer),
  Form: withCssProps(form),
  H1: withCssProps(h1),
  H2: withCssProps(h2),
  H3: withCssProps(h3),
  H4: withCssProps(h4),
  H5: withCssProps(h5),
  H6: withCssProps(h6),
  Head: withCssProps(head),
  Header: withCssProps(header),
  Hgroup: withCssProps(hgroup),
  Hr: withCssProps(hr),
  Html: withCssProps(html),
  I: withCssProps(i),
  Iframe: withCssProps(iframe),
  Img: withCssProps(img),
  Input: withCssProps(input),
  Ins: withCssProps(ins),
  Kbd: withCssProps(kbd),
  Keygen: withCssProps(keygen),
  Label: withCssProps(label),
  Legend: withCssProps(legend),
  Li: withCssProps(li),
  Link: withCssProps(link),
  Main: withCssProps(main),
  Map: withCssProps(map),
  Mark: withCssProps(mark),
  Menu: withCssProps(menu),
  Menuitem: withCssProps(menuitem),
  Meta: withCssProps(meta),
  Meter: withCssProps(meter),
  Nav: withCssProps(nav),
  Noindex: withCssProps(noindex),
  Noscript: withCssProps(noscript),
  Object: withCssProps(object),
  Ol: withCssProps(ol),
  Optgroup: withCssProps(optgroup),
  Option: withCssProps(option),
  Output: withCssProps(output),
  P: withCssProps(p),
  Param: withCssProps(param),
  Picture: withCssProps(picture),
  Pre: withCssProps(pre),
  Progress: withCssProps(progress),
  Q: withCssProps(q),
  Rp: withCssProps(rp),
  Rt: withCssProps(rt),
  Ruby: withCssProps(ruby),
  S: withCssProps(s),
  Samp: withCssProps(samp),
  Script: withCssProps(script),
  Section: withCssProps(section),
  Select: withCssProps(select),
  Small: withCssProps(small),
  Source: withCssProps(source),
  Span: withCssProps(span),
  Style: withCssProps(style),
  Sub: withCssProps(sub),
  Summary: withCssProps(summary),
  Sup: withCssProps(sup),
  Table: withCssProps(table),
  Tbody: withCssProps(tbody),
  Td: withCssProps(td),
  Textarea: withCssProps(textarea),
  Tfoot: withCssProps(tfoot),
  Th: withCssProps(th),
  Thead: withCssProps(thead),
  Time: withCssProps(time),
  Title: withCssProps(title),
  Tr: withCssProps(tr),
  Track: withCssProps(track),
  U: withCssProps(u),
  Ul: withCssProps(ul),
  Strong: withCssProps(strong),
  Video: withCssProps(video),
  Wbr: withCssProps(wbr),
  Svg: withCssProps(svg),
  Animate: withCssProps(animate),
  AnimateTransform: withCssProps(animateTransform),
  Circle: withCssProps(circle),
  ClipPath: withCssProps(clipPath),
  Defs: withCssProps(defs),
  Desc: withCssProps(desc),
  Ellipse: withCssProps(ellipse),
  FeBlend: withCssProps(feBlend),
  FeColorMatrix: withCssProps(feColorMatrix),
  FeComponentTransfer: withCssProps(feComponentTransfer),
  FeComposite: withCssProps(feComposite),
  FeConvolveMatrix: withCssProps(feConvolveMatrix),
  FeDiffuseLighting: withCssProps(feDiffuseLighting),
  FeDisplacementMap: withCssProps(feDisplacementMap),
  FeDistantLight: withCssProps(feDistantLight),
  FeFlood: withCssProps(feFlood),
  FeFuncA: withCssProps(feFuncA),
  FeFuncB: withCssProps(feFuncB),
  FeFuncG: withCssProps(feFuncG),
  FeFuncR: withCssProps(feFuncG),
  FeGaussianBlur: withCssProps(feGaussianBlur),
  FeImage: withCssProps(feImage),
  FeMerge: withCssProps(feMerge),
  FeMergeNode: withCssProps(feMergeNode),
  FeMorphology: withCssProps(feMorphology),
  FeOffset: withCssProps(feOffset),
  FePointLight: withCssProps(fePointLight),
  FeSpecularLighting: withCssProps(feSpecularLighting),
  FeSpotLight: withCssProps(feSpotLight),
  FeTile: withCssProps(feTile),
  FeTurbulence: withCssProps(feTurbulence),
  Filter: withCssProps(filter),
  ForeignObject: withCssProps(foreignObject),
  G: withCssProps(g),
  Image: withCssProps(image),
  Line: withCssProps(line),
  LinearGradient: withCssProps(linearGradient),
  Marker: withCssProps(marker),
  Mask: withCssProps(mask),
  Metadata: withCssProps(metadata),
  Path: withCssProps(path),
  Pattern: withCssProps(pattern),
  Polygon: withCssProps(polygon),
  Polyline: withCssProps(polyline),
  RadialGradient: withCssProps(radialGradient),
  Rect: withCssProps(rect),
  Stop: withCssProps(stop),
  Symbol: withCssProps(symbol),
  Text: withCssProps(text),
  TextPath: withCssProps(textPath),
  Tspan: withCssProps(tspan),
  Use: withCssProps(use),
  View: withCssProps(view),
}
